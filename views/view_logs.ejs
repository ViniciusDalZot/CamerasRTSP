<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Logs da Câmera: <%= nomecamera %></title>
  <link rel="stylesheet" href="/css/style.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.0/socket.io.min.js"></script>
  <style>
    .status-panel {
      background-color: #1e1e1e;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 15px;
      color: #f0f0f0;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .status-indicator {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 5px 15px;
      border-radius: 20px;
      font-weight: bold;
    }
    
    .status-active {
      background-color: rgba(0, 128, 0, 0.3);
      border: 1px solid #00a000;
    }
    
    .status-inactive {
      background-color: rgba(128, 0, 0, 0.3);
      border: 1px solid #a00000;
    }
    
    .status-error {
      background-color: rgba(128, 128, 0, 0.3);
      border: 1px solid #a0a000;
    }
    
    .log-container {
      background-color: #1e1e1e;
      border-radius: 8px;
      padding: 20px;
      height: 500px;
      overflow-y: auto;
      font-family: 'Courier New', Courier, monospace;
      font-size: 0.9rem;
      color: #f0f0f0;
      margin-bottom: 20px;
      border: 1px solid #333;
    }
    
    .log-line {
      padding: 3px 0;
      border-bottom: 1px dashed rgba(255, 255, 255, 0.1);
      white-space: pre-wrap;
      word-break: break-all;
    }
    
    .log-error {
      color: #ff6b6b;
    }
    
    .log-system {
      color: #a3a3a3;
      font-style: italic;
    }
    
    .log-success {
      color: #06d6a0;
    }
    
    .log-warning {
      color: #ffd166;
    }
    
    .log-timestamp {
      color: #888;
      font-size: 0.8em;
      margin-right: 8px;
    }
    
    .log-filters {
      display: flex;
      justify-content: space-between;
      margin-bottom: 15px;
      background-color: #f0f0f0;
      padding: 10px;
      border-radius: 8px;
    }
    
    .log-filters-left {
      display: flex;
      gap: 10px;
    }
    
    .filter-checkbox {
      display: flex;
      align-items: center;
      gap: 5px;
    }
    
    .autoscroll-toggle {
      display: flex;
      align-items: center;
      gap: 5px;
    }
    
    .action-buttons {
      display: flex;
      gap: 10px;
    }
    
    .pulse {
      height: 10px;
      width: 10px;
      background-color: #00a000;
      border-radius: 50%;
      display: inline-block;
      animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
      0% {
        opacity: 1;
        transform: scale(1);
      }
      50% {
        opacity: 0.5;
        transform: scale(1.2);
      }
      100% {
        opacity: 1;
        transform: scale(1);
      }
    }
  </style>
</head>
<body>
  <!-- Cabeçalho -->
  <header class="header">
    <div class="header-container">
      <div class="logo">
        <svg class="logo-icon"><use xlink:href="#camera-icon"></use></svg>
        <h1>RTSP Camera Manager</h1>
      </div>
    </div>
  </header>
  
   <!-- SVG Sprite para ícones -->
   <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol id="camera-icon" viewBox="0 0 24 24">
      <path d="M5 5h-3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2v-12c0-1.1-.9-2-2-2h-3l-1-2h-10l-1 2zm9 13c-2.8 0-5-2.2-5-5s2.2-5 5-5 5 2.2 5 5-2.2 5-5 5z"/>
      <circle cx="14" cy="13" r="3"/>
    </symbol>
    <symbol id="play-icon" viewBox="0 0 24 24">
      <path d="M8 5v14l11-7z"/>
    </symbol>
    <symbol id="stop-icon" viewBox="0 0 24 24">
      <path d="M6 6h12v12H6z"/>
    </symbol>
    <symbol id="edit-icon" viewBox="0 0 24 24">
      <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
    </symbol>
    <symbol id="log-icon" viewBox="0 0 24 24">
      <path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z"/>
    </symbol>
    <symbol id="delete-icon" viewBox="0 0 24 24">
      <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
    </symbol>
    <symbol id="ip-icon" viewBox="0 0 24 24">
      <path d="M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H3V5h18v14zM9 10h2v7H9zm4-3h2v10h-2zm-8 6h2v4H5z"/>
    </symbol>
    <symbol id="user-icon" viewBox="0 0 24 24">
      <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
    </symbol>
    <symbol id="signal-icon" viewBox="0 0 24 24">
      <path d="M2 22h20V2z"/>
    </symbol>
    <symbol id="location-icon" viewBox="0 0 24 24">
      <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/>
    </symbol>
    <symbol id="add-icon" viewBox="0 0 24 24">
      <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
    </symbol>
    <symbol id="logout-icon" viewBox="0 0 24 24">
      <path d="M17 7l-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.58L17 17l5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4V5z"/>
    </symbol>
    <symbol id="youtube-icon" viewBox="0 0 24 24">
      <path d="M10 15L15 12L10 9V15Z"/>
      <path d="M20 4H4C2.9 4 2 4.9 2 6V18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6C22 4.9 21.1 4 20 4ZM20 18H4V6H20V18Z"/>
    </symbol>
    <symbol id="health-icon" viewBox="0 0 24 24">
      <path d="M12 2C8.43 2 5.23 3.54 3.01 6L12 22l8.99-16C18.78 3.55 15.57 2 12 2zm0 15.92L5.51 6.36C7.32 4.85 9.62 4 12 4s4.68.85 6.49 2.36L12 17.92z"/>
    </symbol>
    <symbol id="server-icon" viewBox="0 0 24 24">
      <path d="M2 20h20v-4H2v4zm2-3h2v2H4v-2zM2 4v4h20V4H2zm4 3H4V5h2v2zm-4 7h20v-4H2v4zm2-3h2v2H4v-2z"/>
    </symbol>
    <symbol id="dashboard-icon" viewBox="0 0 24 24">
      <path d="M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z"/>
    </symbol>
  </svg>

   <!-- Barra de navegação -->
   <nav class="nav">
    <div class="nav-container">
      <div class="nav-links">
        <a href="/">
          <svg width="16" height="16"><use xlink:href="#camera-icon"></use></svg>
          Câmeras
        </a>
        <a href="/add_camera">
          <svg width="16" height="16"><use xlink:href="#add-icon"></use></svg>
          Adicionar Câmera
        </a>
        <a href="/dashboard">
          <svg width="16" height="16"><use xlink:href="#dashboard-icon"></use></svg>
          Dashboard
        </a>
        <a href="/system-health">
          <svg width="16" height="16"><use xlink:href="#health-icon"></use></svg>
          Monitoramento
        </a>
      </div>
      <div class="user-info">
        <span>Bem-vindo, Admin</span>
        <a href="/logout" class="btn btn-outline">
          <svg width="16" height="16"><use xlink:href="#logout-icon"></use></svg>
          Sair
        </a>
      </div>
    </div>
  </nav>
  
  <div class="container">
    <div class="log-actions">
      <a href="/" class="action-buttons">← Voltar</a>
      <div class="action-buttons">
        <button id="refreshBtn" class="btn btn-primary">
          <i class="fas fa-sync-alt"></i> Atualizar
        </button>
        <form action="/clear_logs/<%= nomecamera %>" method="post" style="display: inline;">
          <button type="submit" class="btn btn-danger" onclick="return confirm('Tem certeza que deseja limpar os logs?');">
            Limpar Logs
          </button>
        </form>
        <button id="exportBtn" class="btn btn-success">
          Exportar Logs
        </button>
      </div>
    </div>
    
    <!-- Painel de Status -->
    <div class="status-panel">
      <div>
        <h3 style="margin-top: 0;">Status da Câmera</h3>
        <div id="statusMessage">Carregando status...</div>
        <div id="statusTime" style="font-size: 0.9em; margin-top: 5px; color: #aaa;"></div>
      </div>
      <div id="statusIndicator" class="status-indicator">
        Aguardando...
      </div>
    </div>
    
    <!-- Filtros de Log -->
    <div class="log-filters">
      <div class="log-filters-left">
        <div class="filter-checkbox">
          <input type="checkbox" id="filterError" checked>
          <label for="filterError">Erros</label>
        </div>
        <div class="filter-checkbox">
          <input type="checkbox" id="filterWarning" checked>
          <label for="filterWarning">Avisos</label>
        </div>
        <div class="filter-checkbox">
          <input type="checkbox" id="filterSystem" checked>
          <label for="filterSystem">Sistema</label>
        </div>
        <div class="filter-checkbox">
          <input type="checkbox" id="filterSuccess" checked>
          <label for="filterSuccess">Sucesso</label>
        </div>
      </div>
      <div class="autoscroll-toggle">
        <input type="checkbox" id="autoScroll" checked>
        <label for="autoScroll">Auto-scroll</label>
      </div>
    </div>
    
    <div class="log-container" id="logContainer"></div>
  </div>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const socket = io();
      const logContainer = document.getElementById('logContainer');
      const statusMessage = document.getElementById('statusMessage');
      const statusTime = document.getElementById('statusTime');
      const statusIndicator = document.getElementById('statusIndicator');
      const autoScrollCheckbox = document.getElementById('autoScroll');
      const filterError = document.getElementById('filterError');
      const filterWarning = document.getElementById('filterWarning');
      const filterSystem = document.getElementById('filterSystem');
      const filterSuccess = document.getElementById('filterSuccess');
      const refreshBtn = document.getElementById('refreshBtn');
      const exportBtn = document.getElementById('exportBtn');
      
      // Conectar ao servidor e iniciar o monitoramento de logs
      socket.on('connect', function() {
        console.log('Conectado ao servidor');
        addSystemLog('Conexão estabelecida com o servidor');
        socket.emit('start_log', { nomecamera: '<%= nomecamera %>' });
      });
      
      // Receber atualizações de log
      socket.on('log_update', function(data) {
        if (data.type === 'status') {
          updateStatus(data.content);
        } else {
          addLog(data);
        }
      });
      
      // Detectar desconexão
      socket.on('disconnect', function() {
        addSystemLog('Conexão com o servidor perdida. Recarregue a página para reconectar.');
        updateStatus({
          running: false,
          message: 'Conexão perdida',
          error: 'Conexão com o servidor foi encerrada'
        });
      });
      
      // Funções para manipular os logs
      function addLog(data) {
        const logLine = document.createElement('div');
        logLine.classList.add('log-line');
        
        // Adicionar classes com base no tipo de log
        if (data.type) {
          logLine.classList.add(`log-${data.type}`);
        }
        
        // Adicionar timestamp
        if (data.timestamp) {
          const timestamp = document.createElement('span');
          timestamp.classList.add('log-timestamp');
          timestamp.textContent = new Date(data.timestamp).toLocaleTimeString();
          logLine.appendChild(timestamp);
        }
        
        // Adicionar conteúdo do log
        const content = document.createElement('span');
        content.textContent = data.content;
        logLine.appendChild(content);
        
        // Aplicar filtros
        applyFilters(logLine);
        
        // Adicionar ao container
        logContainer.appendChild(logLine);
        
        // Scroll automático
        if (autoScrollCheckbox.checked) {
          logContainer.scrollTop = logContainer.scrollHeight;
        }
      }
      
      function addSystemLog(message) {
        addLog({
          type: 'system',
          content: message,
          timestamp: new Date().toISOString()
        });
      }
      
      function updateStatus(status) {
        // Limpar classes anteriores
        statusIndicator.className = 'status-indicator';
        
        if (status.running) {
          statusIndicator.classList.add('status-active');
          statusIndicator.innerHTML = '<span class="pulse"></span> Ativo';
          statusMessage.textContent = status.message || 'Transmissão ativa';
          if (status.since) {
            statusTime.textContent = `Desde: ${status.since}`;
          }
        } else {
          statusIndicator.classList.add('status-inactive');
          statusIndicator.textContent = 'Inativo';
          statusMessage.textContent = status.message || 'Transmissão inativa';
          if (status.lastRun) {
            statusTime.textContent = `Última execução: ${status.lastRun}`;
          }
        }
        
        if (status.error) {
          statusIndicator.classList.add('status-error');
          statusIndicator.textContent = 'Erro';
          addLog({
            type: 'error',
            content: `Erro de status: ${status.error}`,
            timestamp: new Date().toISOString()
          });
        }
      }
      
      // Filtrar logs
      function applyFilters(logLine) {
        if (!filterError.checked && logLine.classList.contains('log-error')) {
          logLine.style.display = 'none';
        }
        if (!filterWarning.checked && logLine.classList.contains('log-warning')) {
          logLine.style.display = 'none';
        }
        if (!filterSystem.checked && logLine.classList.contains('log-system')) {
          logLine.style.display = 'none';
        }
        if (!filterSuccess.checked && logLine.classList.contains('log-success')) {
          logLine.style.display = 'none';
        }
      }
      
      // Aplicar filtros quando mudarem
      [filterError, filterWarning, filterSystem, filterSuccess].forEach(filter => {
        filter.addEventListener('change', function() {
          const logLines = document.querySelectorAll('.log-line');
          logLines.forEach(applyFilters);
        });
      });
      
      // Botão de atualização
      refreshBtn.addEventListener('click', function() {
        // Limpar container de logs
        logContainer.innerHTML = '';
        addSystemLog('Atualizando logs...');
        
        // Reinicar monitoramento
        socket.emit('restart_log', { nomecamera: '<%= nomecamera %>' });
      });
      
      // Botão de exportação
      exportBtn.addEventListener('click', function() {
        const logLines = document.querySelectorAll('.log-line');
        let logText = '';
        
        logLines.forEach(line => {
          if (line.style.display !== 'none') {
            logText += line.textContent + '\n';
          }
        });
        
        // Criar blob com o texto do log
        const blob = new Blob([logText], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        
        // Criar link para download
        const a = document.createElement('a');
        a.href = url;
        a.download = `log_${new Date().toISOString().slice(0, 10)}_<%= nomecamera %>.txt`;
        document.body.appendChild(a);
        a.click();
        
        // Limpar
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        addSystemLog('Logs exportados com sucesso');
      });
      
      // Analisar logs para colorir diferentes tipos
      function analyzeAndColorLogs() {
        const logLines = document.querySelectorAll('.log-line');
        
        logLines.forEach(line => {
          const text = line.textContent.toLowerCase();
          
          // Se já tem um tipo definido, não alterar
          if (line.classList.contains('log-error') || 
              line.classList.contains('log-warning') || 
              line.classList.contains('log-success') || 
              line.classList.contains('log-system')) {
            return;
          }
          
          // Detectar tipos baseado no conteúdo
          if (text.includes('erro') || text.includes('falha') || text.includes('error') || 
              text.includes('fail') || text.includes('inacessivel')) {
            line.classList.add('log-error');
          } else if (text.includes('aviso') || text.includes('warning')) {
            line.classList.add('log-warning');
          } else if (text.includes('sucesso') || text.includes('iniciado') || 
                    text.includes('success') || text.includes('started')) {
            line.classList.add('log-success');
          }
        });
      }
      
      // Executar análise a cada 2 segundos
      setInterval(analyzeAndColorLogs, 2000);
      
      // Mensagem inicial
      addSystemLog('Iniciando monitoramento de logs para <%= nomecamera %>...');
    });
  </script>
</body>
</html>