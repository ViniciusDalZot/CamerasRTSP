<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Monitoramento do Sistema</title>
  <link rel="stylesheet" href="/css/improved-style.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.0/socket.io.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
   
  </style>
</head>
<body>
  <!-- Cabeçalho -->
  <header class="header">
    <div class="header-container">
      <div class="logo">
        <svg class="logo-icon"><use xlink:href="#camera-icon"></use></svg>
        <h1>RTSP Camera Manager</h1>
      </div>
    </div>
  </header>
   <!-- SVG Sprite para ícones -->
   <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol id="camera-icon" viewBox="0 0 24 24">
      <path d="M5 5h-3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2v-12c0-1.1-.9-2-2-2h-3l-1-2h-10l-1 2zm9 13c-2.8 0-5-2.2-5-5s2.2-5 5-5 5 2.2 5 5-2.2 5-5 5z"/>
      <circle cx="14" cy="13" r="3"/>
    </symbol>
    <symbol id="play-icon" viewBox="0 0 24 24">
      <path d="M8 5v14l11-7z"/>
    </symbol>
    <symbol id="stop-icon" viewBox="0 0 24 24">
      <path d="M6 6h12v12H6z"/>
    </symbol>
    <symbol id="edit-icon" viewBox="0 0 24 24">
      <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
    </symbol>
    <symbol id="log-icon" viewBox="0 0 24 24">
      <path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z"/>
    </symbol>
    <symbol id="delete-icon" viewBox="0 0 24 24">
      <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
    </symbol>
    <symbol id="ip-icon" viewBox="0 0 24 24">
      <path d="M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H3V5h18v14zM9 10h2v7H9zm4-3h2v10h-2zm-8 6h2v4H5z"/>
    </symbol>
    <symbol id="user-icon" viewBox="0 0 24 24">
      <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
    </symbol>
    <symbol id="signal-icon" viewBox="0 0 24 24">
      <path d="M2 22h20V2z"/>
    </symbol>
    <symbol id="location-icon" viewBox="0 0 24 24">
      <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/>
    </symbol>
    <symbol id="add-icon" viewBox="0 0 24 24">
      <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
    </symbol>
    <symbol id="logout-icon" viewBox="0 0 24 24">
      <path d="M17 7l-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.58L17 17l5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4V5z"/>
    </symbol>
    <symbol id="youtube-icon" viewBox="0 0 24 24">
      <path d="M10 15L15 12L10 9V15Z"/>
      <path d="M20 4H4C2.9 4 2 4.9 2 6V18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6C22 4.9 21.1 4 20 4ZM20 18H4V6H20V18Z"/>
    </symbol>
    <symbol id="health-icon" viewBox="0 0 24 24">
      <path d="M12 2C8.43 2 5.23 3.54 3.01 6L12 22l8.99-16C18.78 3.55 15.57 2 12 2zm0 15.92L5.51 6.36C7.32 4.85 9.62 4 12 4s4.68.85 6.49 2.36L12 17.92z"/>
    </symbol>
    <symbol id="server-icon" viewBox="0 0 24 24">
      <path d="M2 20h20v-4H2v4zm2-3h2v2H4v-2zM2 4v4h20V4H2zm4 3H4V5h2v2zm-4 7h20v-4H2v4zm2-3h2v2H4v-2z"/>
    </symbol>
    <symbol id="dashboard-icon" viewBox="0 0 24 24">
      <path d="M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z"/>
    </symbol>
  </svg>


   <!-- Barra de navegação -->
   <nav class="nav">
    <div class="nav-container">
      <div class="nav-links">
        <a href="/">
          <svg width="16" height="16"><use xlink:href="#camera-icon"></use></svg>
          Câmeras
        </a>
        <a href="/add_camera">
          <svg width="16" height="16"><use xlink:href="#add-icon"></use></svg>
          Adicionar Câmera
        </a>
        <a href="/dashboard">
          <svg width="16" height="16"><use xlink:href="#dashboard-icon"></use></svg>
          Dashboard
        </a>
        <a href="/system-health" class="active">
          <svg width="16" height="16"><use xlink:href="#health-icon"></use></svg>
          Monitoramento
        </a>
      </div>
      <div class="user-info">
        <span>Bem-vindo, Admin</span>
        <a href="/logout" class="btn btn-outline">
          <svg width="16" height="16"><use xlink:href="#logout-icon"></use></svg>
          Sair
        </a>
      </div>
    </div>
  </nav>
  
  <div class="container">
    <!-- Seção de atualização -->
    <div class="refresh-section">
      <div class="countdown" id="refresh-countdown">
        Próxima atualização em: <span id="countdown-value">30</span> segundos
      </div>
      <div class="auto-refresh">
        <label for="auto-refresh-toggle">Auto Refresh:</label>
        <input type="checkbox" id="auto-refresh-toggle" checked>
        <button id="refresh-now" class="btn btn-primary btn-sm">
          <i class="fas fa-sync-alt"></i> Atualizar Agora
        </button>
      </div>
    </div>
    
    <!-- Alertas e Problemas -->
    <div class="issues-container" id="issues-container">
      <!-- Os problemas serão carregados dinamicamente -->
    </div>
    
    <!-- Informações do Sistema -->
    <div class="health-container">
      <!-- CPU Usage -->
      <div class="health-card">
        <div class="health-header">
          <h3 class="health-title">
            <i class="fas fa-microchip"></i> Uso de CPU
          </h3>
          <span class="health-timestamp" id="cpu-timestamp">-</span>
        </div>
        <div class="health-content">
          <div class="metric-item">
            <span class="metric-label">Uso Atual:</span>
            <span class="metric-value" id="cpu-usage">-</span>
          </div>
          <div class="progress-container">
            <div class="progress-bar" id="cpu-progress-bar" style="width: 0%"></div>
          </div>
          <div class="metric-item">
            <span class="metric-label">Núcleos:</span>
            <span class="metric-value" id="cpu-cores">-</span>
          </div>
          <div class="metric-item">
            <span class="metric-label">Carga Média:</span>
            <span class="metric-value" id="cpu-load">-</span>
          </div>
        </div>
        <div class="chart-container">
          <canvas id="cpu-chart"></canvas>
        </div>
      </div>
      
      <!-- Memory Usage -->
      <div class="health-card">
        <div class="health-header">
          <h3 class="health-title">
            <i class="fas fa-memory"></i> Uso de Memória
          </h3>
          <span class="health-timestamp" id="memory-timestamp">-</span>
        </div>
        <div class="health-content">
          <div class="metric-item">
            <span class="metric-label">Uso Atual:</span>
            <span class="metric-value" id="memory-usage">-</span>
          </div>
          <div class="progress-container">
            <div class="progress-bar" id="memory-progress-bar" style="width: 0%"></div>
          </div>
          <div class="metric-item">
            <span class="metric-label">Total:</span>
            <span class="metric-value" id="memory-total">-</span>
          </div>
          <div class="metric-item">
            <span class="metric-label">Livre:</span>
            <span class="metric-value" id="memory-free">-</span>
          </div>
          <div class="metric-item">
            <span class="metric-label">Usado:</span>
            <span class="metric-value" id="memory-used">-</span>
          </div>
        </div>
        <div class="chart-container">
          <canvas id="memory-chart"></canvas>
        </div>
      </div>
      
      <!-- Disk Usage -->
      <div class="health-card">
        <div class="health-header">
          <h3 class="health-title">
            <i class="fas fa-hdd"></i> Uso de Disco
          </h3>
          <span class="health-timestamp" id="disk-timestamp">-</span>
        </div>
        <div class="health-content">
          <div class="metric-item">
            <span class="metric-label">Uso Atual:</span>
            <span class="metric-value" id="disk-usage">-</span>
          </div>
          <div class="progress-container">
            <div class="progress-bar" id="disk-progress-bar" style="width: 0%"></div>
          </div>
          <div class="metric-item">
            <span class="metric-label">Sistema de Arquivos:</span>
            <span class="metric-value" id="disk-filesystem">-</span>
          </div>
          <div class="metric-item">
            <span class="metric-label">Tamanho:</span>
            <span class="metric-value" id="disk-size">-</span>
          </div>
          <div class="metric-item">
            <span class="metric-label">Usado:</span>
            <span class="metric-value" id="disk-used">-</span>
          </div>
          <div class="metric-item">
            <span class="metric-label">Disponível:</span>
            <span class="metric-value" id="disk-available">-</span>
          </div>
        </div>
        <div class="chart-container">
          <canvas id="disk-chart"></canvas>
        </div>
      </div>
      
      <!-- System Info -->
      <div class="health-card">
        <div class="health-header">
          <h3 class="health-title">
            <i class="fas fa-server"></i> Informações do Sistema
          </h3>
          <span class="health-timestamp" id="system-timestamp">-</span>
        </div>
        <div class="health-content">
          <div class="metric-item">
            <span class="metric-label">Tempo Ativo:</span>
            <span class="metric-value" id="system-uptime">-</span>
          </div>
          <div class="metric-item">
            <span class="metric-label">Sistema Operacional:</span>
            <span class="metric-value" id="system-platform">-</span>
          </div>
          <div class="metric-item">
            <span class="metric-label">Hostname:</span>
            <span class="metric-value" id="system-hostname">-</span>
          </div>
          <div class="metric-item">
            <span class="metric-label">Versão do Node.js:</span>
            <span class="metric-value" id="system-nodejs">-</span>
          </div>
          <div class="metric-item">
            <span class="metric-label">Uso de Memória do Node.js:</span>
            <span class="metric-value" id="system-node-memory">-</span>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Informações das Câmeras -->
    <h2>Status das Câmeras</h2>
    <div class="camera-health" id="camera-health-container">
      <!-- As câmeras serão carregadas dinamicamente -->
    </div>
  </div>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Elementos
      const refreshButton = document.getElementById('refresh-now');
      const autoRefreshToggle = document.getElementById('auto-refresh-toggle');
      const countdownValue = document.getElementById('countdown-value');
      const issuesContainer = document.getElementById('issues-container');
      const cameraHealthContainer = document.getElementById('camera-health-container');
      
      // Gráficos
      let cpuChart;
      let memoryChart;
      let diskChart;
      
      // Histórico de dados para gráficos
      const cpuHistory = [];
      const memoryHistory = [];
      const diskHistory = [];
      const timeLabels = [];
      const maxHistoryPoints = 10;
      
      // Intervalo de atualização
      let countdownInterval;
      let secondsLeft = 30;
      
      // Inicializar gráficos
      initCharts();
      
      // Carregar dados iniciais
      loadHealthData();
      
      // Iniciar contagem regressiva
      startCountdown();
      
      // Adicionar listeners
      refreshButton.addEventListener('click', function() {
        loadHealthData();
        resetCountdown();
      });
      
      autoRefreshToggle.addEventListener('change', function() {
        if (this.checked) {
          startCountdown();
        } else {
          clearInterval(countdownInterval);
          countdownValue.textContent = '---';
        }
      });
      
      // Funções
      function initCharts() {
        // CPU Chart
        const cpuCtx = document.getElementById('cpu-chart').getContext('2d');
        cpuChart = new Chart(cpuCtx, {
          type: 'line',
          data: {
            labels: timeLabels,
            datasets: [{
              label: 'Uso de CPU (%)',
              data: cpuHistory,
              borderColor: '#3498db',
              backgroundColor: 'rgba(52, 152, 219, 0.1)',
              borderWidth: 2,
              fill: true,
              tension: 0.4
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                max: 100
              }
            }
          }
        });
        
        // Memory Chart
        const memoryCtx = document.getElementById('memory-chart').getContext('2d');
        memoryChart = new Chart(memoryCtx, {
          type: 'line',
          data: {
            labels: timeLabels,
            datasets: [{
              label: 'Uso de Memória (%)',
              data: memoryHistory,
              borderColor: '#e74c3c',
              backgroundColor: 'rgba(231, 76, 60, 0.1)',
              borderWidth: 2,
              fill: true,
              tension: 0.4
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                max: 100
              }
            }
          }
        });
        
        // Disk Chart
        const diskCtx = document.getElementById('disk-chart').getContext('2d');
        diskChart = new Chart(diskCtx, {
          type: 'doughnut',
          data: {
            labels: ['Usado', 'Livre'],
            datasets: [{
              data: [0, 100],
              backgroundColor: [
                'rgba(231, 76, 60, 0.7)',
                'rgba(46, 204, 113, 0.7)'
              ],
              borderColor: [
                '#e74c3c',
                '#2ecc71'
              ],
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false
          }
        });
      }
      
      function loadHealthData() {
        // Mostrar indicador de carregamento
        showLoading();
        
        // Buscar dados de saúde do sistema
        fetch('/api/health')
          .then(response => response.json())
          .then(data => {
            updateSystemHealth(data.system);
            updateCamerasHealth(data.cameras);
            hideLoading();
          })
          .catch(error => {
            console.error('Erro ao carregar dados de saúde:', error);
            hideLoading();
          });
        
        // Buscar problemas
        fetch('/api/health/issues')
          .then(response => response.json())
          .then(data => {
            updateIssues(data.issues);
          })
          .catch(error => {
            console.error('Erro ao carregar problemas:', error);
          });
      }
      
      function updateSystemHealth(systemData) {
        if (!systemData) return;
        
        // Atualizar timestamp
        const timestamp = new Date(systemData.timestamp).toLocaleTimeString();
        document.getElementById('cpu-timestamp').textContent = timestamp;
        document.getElementById('memory-timestamp').textContent = timestamp;
        document.getElementById('disk-timestamp').textContent = timestamp;
        document.getElementById('system-timestamp').textContent = timestamp;
        
        // CPU
        if (systemData.cpu) {
          const cpuUsage = systemData.cpu.usage.toFixed(2);
          document.getElementById('cpu-usage').textContent = `${cpuUsage}%`;
          document.getElementById('cpu-cores').textContent = systemData.cpu.cores;
          document.getElementById('cpu-load').textContent = systemData.loadAvg ? systemData.loadAvg.join(', ') : 'N/A';
          
          // Atualizar barra de progresso
          const cpuProgressBar = document.getElementById('cpu-progress-bar');
          cpuProgressBar.style.width = `${cpuUsage}%`;
          
          if (cpuUsage > 90) {
            cpuProgressBar.className = 'progress-bar danger';
          } else if (cpuUsage > 70) {
            cpuProgressBar.className = 'progress-bar warning';
          } else {
            cpuProgressBar.className = 'progress-bar';
          }
          
          // Atualizar gráfico
          updateChart(cpuChart, cpuHistory, cpuUsage);
        }
        
        // Memória
        if (systemData.memory) {
          document.getElementById('memory-usage').textContent = `${systemData.memory.usedPercentage}%`;
          document.getElementById('memory-total').textContent = systemData.memory.total;
          document.getElementById('memory-free').textContent = systemData.memory.free;
          document.getElementById('memory-used').textContent = systemData.memory.used;
          
          // Atualizar barra de progresso
          const memoryProgressBar = document.getElementById('memory-progress-bar');
          const memoryUsage = parseFloat(systemData.memory.usedPercentage);
          memoryProgressBar.style.width = `${memoryUsage}%`;
          
          if (memoryUsage > 90) {
            memoryProgressBar.className = 'progress-bar danger';
          } else if (memoryUsage > 70) {
            memoryProgressBar.className = 'progress-bar warning';
          } else {
            memoryProgressBar.className = 'progress-bar';
          }
          
          // Atualizar gráfico
          updateChart(memoryChart, memoryHistory, memoryUsage);
        }
        
        // Disco
        if (systemData.disk) {
          const diskUsage = systemData.disk.usedPercentage ? 
            parseInt(systemData.disk.usedPercentage.replace('%', '')) : 0;
          
          document.getElementById('disk-usage').textContent = systemData.disk.usedPercentage || 'N/A';
          document.getElementById('disk-filesystem').textContent = systemData.disk.filesystem || 'N/A';
          document.getElementById('disk-size').textContent = systemData.disk.size || 'N/A';
          document.getElementById('disk-used').textContent = systemData.disk.used || 'N/A';
          document.getElementById('disk-available').textContent = systemData.disk.available || 'N/A';
          
          // Atualizar barra de progresso
          const diskProgressBar = document.getElementById('disk-progress-bar');
          diskProgressBar.style.width = `${diskUsage}%`;
          
          if (diskUsage > 90) {
            diskProgressBar.className = 'progress-bar danger';
          } else if (diskUsage > 70) {
            diskProgressBar.className = 'progress-bar warning';
          } else {
            diskProgressBar.className = 'progress-bar';
          }
          
          // Atualizar gráfico
          if (diskChart) {
            diskChart.data.datasets[0].data = [diskUsage, 100 - diskUsage];
            diskChart.update();
          }
        }
        
        // Informações do sistema
        document.getElementById('system-uptime').textContent = formatUptime(systemData.uptime);
        document.getElementById('system-platform').textContent = `${process.platform} ${process.arch}`;
        document.getElementById('system-hostname').textContent = require('os').hostname();
        document.getElementById('system-nodejs').textContent = process.version;
        
        if (systemData.nodeProcess) {
          const rss = formatBytes(systemData.nodeProcess.rss);
          const heapTotal = formatBytes(systemData.nodeProcess.heapTotal);
          const heapUsed = formatBytes(systemData.nodeProcess.heapUsed);
          document.getElementById('system-node-memory').textContent = `RSS: ${rss} | Heap: ${heapUsed}/${heapTotal}`;
        }
      }
      
      function updateCamerasHealth(camerasData) {
        if (!camerasData) return;
        
        cameraHealthContainer.innerHTML = '';
        
        if (Object.keys(camerasData).length === 0) {
          cameraHealthContainer.innerHTML = `
            <div style="grid-column: 1 / -1; text-align: center; padding: 40px;">
              <h3>Nenhuma câmera encontrada</h3>
              <p>Adicione câmeras para visualizar seu status.</p>
            </div>
          `;
          return;
        }
        
        for (const [cameraName, health] of Object.entries(camerasData)) {
          const isOnline = health.ping !== 'Sem Comunicação';
          const isStreaming = health.status && health.status.running;
          
          let statusClass = isOnline ? 'status-online' : 'status-offline';
          let statusText = isOnline ? 'Online' : 'Offline';
          
          if (isStreaming) {
            statusClass = 'status-streaming';
            statusText = 'Streaming';
          }
          
          const card = document.createElement('div');
          card.className = 'camera-health-card';
          
          let processesHtml = '';
          if (health.ffmpegProcesses && health.ffmpegProcesses.length > 0) {
            processesHtml = `
              <div class="camera-metric">
                <div class="camera-metric-label">Processos FFMPEG:</div>
                ${health.ffmpegProcesses.map(proc => `
                  <div class="ffmpeg-process">
                    <span class="ffmpeg-pid">PID: ${proc.pid}</span> |
                    <span class="ffmpeg-time">Iniciado: ${proc.startTime}</span>
                  </div>
                `).join('')}
              </div>
            `;
          }
          
          card.innerHTML = `
            <div class="camera-health-header">
              <h3>${cameraName}</h3>
              <div class="camera-health-status ${statusClass}">
                ${statusText}
              </div>
            </div>
            <div class="camera-health-body">
              <div class="camera-metric">
                <div class="camera-metric-label">IP:</div>
                <div class="camera-metric-value">${health.details.ip}</div>
              </div>
              <div class="camera-metric">
                <div class="camera-metric-label">Ping:</div>
                <div class="camera-metric-value">${health.ping}</div>
              </div>
              <div class="camera-metric">
                <div class="camera-metric-label">Status:</div>
                <div class="camera-metric-value">${health.status ? health.status.message : 'Desconhecido'}</div>
              </div>
              <div class="camera-metric">
                <div class="camera-metric-label">Tamanho do Log:</div>
                <div class="camera-metric-value">${formatBytes(health.logSize)}</div>
              </div>
              ${processesHtml}
              <div class="camera-metric">
                <div class="camera-metric-label">Última Verificação:</div>
                <div class="camera-metric-value">${new Date(health.lastCheck).toLocaleString()}</div>
              </div>
            </div>
          `;
          
          cameraHealthContainer.appendChild(card);
        }
      }
      
      function updateIssues(issues) {
        issuesContainer.innerHTML = '';
        
        if (!issues || issues.length === 0) {
          issuesContainer.innerHTML = `
            <div style="text-align: center; padding: 20px; background-color: rgba(46, 204, 113, 0.1); border-radius: 10px; margin-bottom: 30px;">
              <i class="fas fa-check-circle" style="font-size: 2rem; color: #2ecc71; margin-bottom: 10px;"></i>
              <h3 style="margin: 10px 0; color: #2ecc71;">Nenhum problema detectado</h3>
              <p>O sistema está funcionando normalmente.</p>
            </div>
          `;
          return;
        }
        
        const criticalIssues = issues.filter(issue => issue.type === 'critical');
        const warningIssues = issues.filter(issue => issue.type === 'warning');
        
        // Adicionar contador de problemas
        issuesContainer.innerHTML = `
          <div style="margin-bottom: 20px; display: flex; gap: 20px;">
            <div style="background-color: rgba(231, 76, 60, 0.1); padding: 10px 20px; border-radius: 5px; text-align: center;">
              <div style="font-size: 1.5rem; font-weight: bold; color: #e74c3c;">${criticalIssues.length}</div>
              <div style="font-size: 0.8rem; color: #7f8c8d;">Críticos</div>
            </div>
            <div style="background-color: rgba(243, 156, 18, 0.1); padding: 10px 20px; border-radius: 5px; text-align: center;">
              <div style="font-size: 1.5rem; font-weight: bold; color: #f39c12;">${warningIssues.length}</div>
              <div style="font-size: 0.8rem; color: #7f8c8d;">Avisos</div>
            </div>
          </div>
        `;
        
        // Adicionar problemas críticos
        if (criticalIssues.length > 0) {
          issuesContainer.innerHTML += `<h3>Problemas Críticos</h3>`;
          criticalIssues.forEach(issue => {
            const issueCard = document.createElement('div');
            issueCard.className = 'issue-card critical';
            
            issueCard.innerHTML = `
              <div class="issue-icon critical">
                <i class="fas fa-exclamation-circle"></i>
              </div>
              <div class="issue-details">
                <div class="issue-title">${issue.message}</div>
                <div class="issue-component">Componente: ${issue.component}${issue.camera ? ` | Câmera: ${issue.camera}` : ''}</div>
              </div>
            `;
            
            issuesContainer.appendChild(issueCard);
          });
        }
        
        // Adicionar avisos
        if (warningIssues.length > 0) {
          issuesContainer.innerHTML += `<h3>Avisos</h3>`;
          warningIssues.forEach(issue => {
            const issueCard = document.createElement('div');
            issueCard.className = 'issue-card warning';
            
            issueCard.innerHTML = `
              <div class="issue-icon warning">
                <i class="fas fa-exclamation-triangle"></i>
              </div>
              <div class="issue-details">
                <div class="issue-title">${issue.message}</div>
                <div class="issue-component">Componente: ${issue.component}${issue.camera ? ` | Câmera: ${issue.camera}` : ''}</div>
              </div>
            `;
            
            issuesContainer.appendChild(issueCard);
          });
        }
      }
      
      function updateChart(chart, historyArray, newValue) {
        if (!chart) return;
        
        // Adicionar novo ponto
        historyArray.push(newValue);
        
        // Adicionar label de tempo
        const now = new Date().toLocaleTimeString();
        timeLabels.push(now);
        
        // Manter apenas os últimos N pontos
        if (historyArray.length > maxHistoryPoints) {
          historyArray.shift();
          timeLabels.shift();
        }
        
        // Atualizar dados do gráfico
        chart.data.labels = timeLabels;
        chart.data.datasets[0].data = historyArray;
        
        // Atualizar gráfico
        chart.update();
      }
      
      function startCountdown() {
        // Limpar intervalo existente
        clearInterval(countdownInterval);
        secondsLeft = 30;
        countdownValue.textContent = secondsLeft;
        
        countdownInterval = setInterval(function() {
          secondsLeft--;
          countdownValue.textContent = secondsLeft;
          
          if (secondsLeft <= 0) {
            loadHealthData();
            secondsLeft = 30;
          }
        }, 1000);
      }
      
      function resetCountdown() {
        if (autoRefreshToggle.checked) {
          clearInterval(countdownInterval);
          secondsLeft = 30;
          countdownValue.textContent = secondsLeft;
          startCountdown();
        }
      }
      
      function formatUptime(seconds) {
        const days = Math.floor(seconds / (3600 * 24));
        const hours = Math.floor((seconds % (3600 * 24)) / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const remainingSeconds = Math.floor(seconds % 60);
        
        const parts = [];
        if (days > 0) parts.push(`${days}d`);
        if (hours > 0) parts.push(`${hours}h`);
        if (minutes > 0) parts.push(`${minutes}m`);
        if (remainingSeconds > 0 || parts.length === 0) parts.push(`${remainingSeconds}s`);
        
        return parts.join(' ');
      }
      
      function formatBytes(bytes, decimals = 2) {
        if (!bytes || bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];
        
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
      }
      
      function showLoading() {
        // Adicionar indicador de carregamento
        const loadingEl = document.createElement('div');
        loadingEl.id = 'loading-indicator';
        loadingEl.style.position = 'fixed';
        loadingEl.style.top = '0';
        loadingEl.style.left = '0';
        loadingEl.style.width = '100%';
        loadingEl.style.height = '100%';
        loadingEl.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
        loadingEl.style.display = 'flex';
        loadingEl.style.justifyContent = 'center';
        loadingEl.style.alignItems = 'center';
        loadingEl.style.zIndex = '9999';
        
        loadingEl.innerHTML = `
          <div style="text-align: center; color: white;">
            <i class="fas fa-spinner fa-spin" style="font-size: 3rem;"></i>
            <div style="margin-top: 10px;">Carregando...</div>
          </div>
        `;
        
        document.body.appendChild(loadingEl);
      }
      
      function hideLoading() {
        const loadingEl = document.getElementById('loading-indicator');
        if (loadingEl) {
          document.body.removeChild(loadingEl);
        }
      }
    });
  </script>
</body>
</html>